@page "/students/details"
@inject VCard.Data.StudentDbContext DB
@using VCard.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Student Details</PageTitle>

<h1>Student Details</h1>

<div class="card mt-5 mx-auto" style="width: 700px; border-radius: 15px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
    <div class="card-body">
        @if (student is null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="row">
                <div class="col-md-4 text-center">
                    @if (!string.IsNullOrEmpty(student.PictureUrl))
                    {
                        <img src="@student.PictureUrl" alt="Student Image" class="img-fluid rounded" style="max-width: 200px; max-height: 200px; border-radius: 50%;" />
                    }
                    else
                    {
                        <div class="text-center">
                            <p>No image available</p>
                        </div>
                    }
                </div>
                <div class="col-md-8">
                    <dl class="row">
                        <dt class="col-sm-4">Name:</dt>
                        <dd class="col-sm-8">@student.Name</dd>
                        <dt class="col-sm-4">Date Of Birth:</dt>
                        <dd class="col-sm-8">@student.Birthdate.ToShortDateString()</dd>
                        <dt class="col-sm-4">Gender:</dt>
                        <dd class="col-sm-8">@student.Gender</dd>
                    </dl>
                    <div class="text-center mt-3">
                        <a href="@($"/students/edit?id={student.Id}")" class="btn btn-primary">Edit</a>
                        <a href="@("/")" class="btn btn-secondary ml-2">Back to List</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    Student? student;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        student = await DB.Students.FirstOrDefaultAsync(m => m.Id == Id);

        if (student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
